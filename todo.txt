add error if use undeclared variable
refactor DETERMINE_X_RET


a= a++ doesn work
make a = a++ to have zero effect on stack


make user cast?
if 2.0+2.0 == 4


refactor equal in AST and compile.cpp

local variables are on stack
if we want to change them or read them,
we use indicies that we calcualte prior to usage of variables


rework token leaking to backend


fix stack getting bloated by unneccesaty set local command during init of local variable

clean up type stuff, where exactly do we keep our types in value or hash table for types?

have identifier in different node for code reuse

deal with token type to value type conversion on type check stage



conflict between type of init variable and call function 

pass wrong arguments

invoke a function that is not defined






add support of single argument for functions? like Print a?


peephole optimiser
Constant Expression Folding

add errors of binary operations where operands of wrong type
add constant folding for cases where operators are different but constant folding is possible

add support of returning value for postfix operators: b : int = a++;
right now it doesn't return value and we have empty stack problem

we should differentiate whether postfix operator used as statement or expression, so that we know when stack is supposed to be cleared


this is the way we do it now 

a++;
b:int =a;

Remove substract operation since every our a - b operation is a + (-b);

give errors if there are no then in if statement

support syntax like  if (a > b) return a;
	       return b;

check why in for after branching we have operations in parent block

check compiler errors on return from functions
add init
arg1, arg2, arg3  := 2 ,2, 2, 
add support for 0..(2+2)

fix wrong comment not being recognised as error


Test: Reassignments and Shadowing with Floats
k := 20.0;

catch division by 0 or throw errors



A compiler creates binary file with bytecode and constant pool, 
in addition it creates cpp/h files that include all c functions that will be part of dll 
c functions will be wrapped by functions with agreed signature, so that virtual machine
knows what to cast to a pointer once pointer to function is loaded from dll/plugin

A plugin will be dll that includes all c functions a compiled code uses

We could include the found functions to virtual machine itself, but we will need to rebuild virtual machine every time

A plugin will remove a need to rebuild virtual machine every time, once compiler has compiled we can use old virtual machine, since it will rely on new built DLL. 


catch errors with 

* 
*/


add better support of void functions

fun func_name()
{
	
}

add spdlog to compiler and vm

we don't const prop for argument block for now, because it is difficult to figure out 
what exactly we need to delete in dead code elmination (make it by default marked all, 
and then delete ones we processed?)



look up external functions and constants by specific module
external consts are only ints for now

support if single statement without curly braces

support implicit conversion of bool to int glfwSetWindowShouldClose(window,1 ) and glfwSetWindowShouldClose(window,true)


we pass predefined function to setCallback and this function invokes user defined function which moves to new callframe 


