add error if use undeclared variable
refactor DETERMINE_X_RET


a= a++ doesn work
make a = a++ to have zero effect on stack


make user cast?
if 2.0+2.0 == 4


refactor equal in AST and compile.cpp

local variables are on stack
if we want to change them or read them,
we use indicies that we calcualte prior to usage of variables


rework token leaking to backend


fix stack getting bloated by unneccesaty set local command during init of local variable

clean up type stuff, where exactly do we keep our types in value or hash table for types?

have identifier in different node for code reuse

deal with token type to value type conversion on type check stage



conflict between type of init variable and call function 

pass wrong arguments

invoke a function that is not defined






add support of single argument for functions? like Print a?


peephole optimiser
Constant Expression Folding

add errors of binary operations where operands of wrong type
add constant folding for cases where operators are different but constant folding is possible

add support of returning value for postfix operators: b : int = a++;
right now it doesn't return value and we have empty stack problem

we should differentiate whether postfix operator used as statement or expression, so that we know when stack is supposed to be cleared


this is the way we do it now 

a++;
b:int =a;

Remove substract operation since every our a - b operation is a + (-b);

give errors if there are no then in if statement