add error if use undeclared variable
refactor DETERMINE_X_RET


a= a++ doesn work
make a = a++ to have zero effect on stack


make user cast?
if 2.0+2.0 == 4


refactor equal in AST and compile.cpp

local variables are on stack
if we want to change them or read them,
we use indicies that we calcualte prior to usage of variables


rework token leaking to backend


fix stack getting bloated by unneccesaty set local command during init of local variable

clean up type stuff, where exactly do we keep our types in value or hash table for types?

have identifier in different node for code reuse

deal with token type to value type conversion on type check stage

catch
g := 0;
g := 0;


compiler thinks a is local in global while (leaking from functions)
fun mult (a : int, b: int) : int
{
	return a*b;
}
fun foo( a: int, b : int ) : int 
{ 
	//Print a;
	//Print b;
	//ret := 25;
	//a:= 25;
	//b:= 25;
	//return mult(2,2) + mult(2,2) ;
	return mult(2,2) +2 ;
}

g := 2+2;
a := 5+2;
Print g;
while a  >= 5 
{
	a--;
}
//fun main() : int
//{
//	//a := foo(2,2);
//	//f := fib(5);
//	Print g;
//	//Print f;
//	return 0;
//}
