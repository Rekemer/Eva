/*
#test
 a = 12 
*/

a: int = 100;
					if a == 100
					{
						a++;
					}
                    Print a;
//a:=0;
//					for i:= 0..5
//					{
//						sd6:="sd";
//						if i % 2 == 1 
//						{
//							sd5:="sd";
//							continue;
//						}
//						a+=i;
//						for j:=0; j < 5; j++; 
//						{
//							sd3:="sd";
//							if j == 4
//							{	
//								sd3:="sd";
//								break;
//							}
//							sd4:="sd";
//							a+=j;
//						}
//					}

//g:= 0;
//for  i:= 0; i < 5; i+=1;
//{
//	a := 2 + 2;
//	c:= a + 2;
//	g+=c;
//}
//
//while g  < 5
//{
//	a := 2 + 2;
//	c:= a + 2;
//	g+= c;
//}
//
//x := 10;
//y := 20;
//z := 0;
//a := x + y;
//b := a * 2;
//Print b;
//c:=   2*b/(b -a + a);
// Print c;
//for i := 1..3 {
//    a := x + y;
//    b := a * 2;
//    c:=0;
//    if i % 2 == 0 {
//        c = b + 5;
//        Print "Even";
//    } else {
//        a := x + y;
//        b := a * 2;
//        Print b;
//        c =  2*b -a;
//        Print c;
//        Print "Odd";
//    }
//    z += c;
//    Print z;
//}

//fun foo(n : int) : int
//{
//	return n + 2;
//}




//a := 2;
//
//c0 := 7 + a + 3 + 3;
//c := 3 + a + 3 ; // 12
//c1 := 3 + 3 + a; // 8
//c2 := 2 *6  + a - 3 - 3/2; // 10
//c3 :=  a + 2 *6   - 3 - 3/2 - c+ c -c; // -2
//c4 := 2 *6  + a - c; // 2
//c5 := c * 2.0 * a / 4; // 12
//c6 := c * 2.0 * a / 4 * a/16; // 1.5
//d := 1 - 2 * 0;
//b:= 0/2 + d + 2 ;
//
//check : bool = c0 == 15 && d == 1 && b == 3&& 
//c == 8 && c1 == 8  &&
// c2 == 10 && c3 == (c2 - c + c - c) && c4 == 6  && c5 == 8.0 
// && c6 == 1.0; 



//fun foo(n : int) : int
//{
//	return n + 2 + 4;
//}
//
//a := 2;
//
//c0 := foo(2.0 + 3.5) + a + 3 + 3;
//
//c := 3 + a + 3 ; 
//c1 := 3 + 3 + a;
//c2 := 2 *6  + a - 3 - 3/2;
//c3 :=  a + 2 *6   - 3 - 3/2 - c+ c -c;
//c4 := 2 *6  + a - c;
//c5 := c * 2.0 * a / 4;
//c6 := c * 2.0 * a / 4 * a/16;
//d := 1 - 2 * 0;
//b:= 0/2 + d + 2 ;
//
////check : bool = c0 == 15 && d == 1 && b == 3&& c == 8 && c1 == 8  &&
//// c2 == 10 && c3 == (c2 - c + c - c) && c4 == 6  && c5 == 8.0 
//// && c6 == 1.0;   
// check : bool = c0 == 15 && d == 1 && b == 3&& c == 8 && c1 == 8  &&
// c2 == 10 && c3 == (c2 - c + c - c) && c4 == 6  && c5 == 8.0 
// && c6 == 1.0;  


//x := 3 + 2.5 * 4; // Should fold to 13.0
//y := (5 + 3.5) * (2.0 - 1); // Should fold to 8.5
//z := x * y + 10.0 / 2; // Should fold to 115.5
////
////// Test: Float Arithmetic
//a := 10.0;
//b := 5.5 + 2.2 * 3.0 - 1.1; // Should fold to 11.0
//c := 2.0 * (a + b) / 4.0; // Should fold to 10.5
//
//// Test: Propagation with Mixed Integers and Floats
//d := 10;
//e := d + 5.5; // Should propagate d = 10, fold e = 15.5
//
//// Test: Control Flow with Floats
//f := 5.5;
//g := 0;
//if (f > 5.0) {
//    g = f + 1.0; // g = 6.5
//} else {
//    g = f - 1.0; // Dead code
//}
//
//Print g;
//// Test: Loops with Float Arithmetic
//ha := 0.0;
//for i := 0; i < 5; i++; {
//    h := ha + i * 0.5; // Should fold to 5.0
//}
//
//////// Test: Nested and Complex Float Expressions
//j := (1.5 + 2.0 * 3.0 - 4.0 / 2.0) * (5.0 + 1.5); // Should fold to 35.75
//
////Test: Reassignments and Shadowing with Floats
//k := 20.0;
//k = k + 10.0; // Should propagate k = 30.0
//{
//    k := 5.0; // Inner scope shadowing
//    l := k * 2.0; // l = 10.0
//}
//m := k + 10.0; // Should fold to 40.0 in the outer scope
//
//// Test: Edge Cases with Floats
//n := 0.0 / 1.0; // Valid, should fold to 0.0
////o := 1.0 / 0.0; // Should produce a warning or error
//p := 5.0 - 5.0; // Should fold to 0.0
//
//// Test: Redundant Float Expressions
//q := 3.5 + 2.5; // q = 6.0
//r := 3.5 + 2.5; // r should reuse the constant result of q


//ha1 := 0.2;
//{
//	h := ha1 + 2 + 2;
//}

//g := 0;
//for  i:= 0; i < 10; i+=1;
//{
//	g+=i;
//}

//a: int = 3;
//{
//	b : int = 15;
//	b+=2;
//	{
//		c : float = -1;
//		b*= c;
//		sd:="sd";
//		a -=c;
//	}
//	a+=b;
//}
//Print a;

//a: float = 3;
//{
//	a: float = 2;
//	a+=2;
//}
//
//{
//	b : int = 15;
//	sd:="sd";
//	sd1:="sd";
//	sd2:="sd";
//	b+=2;
//	{
//		sd1:="sd";
//		c : float = -1;
//		b*= c;
//		sd2:="sd";
//		a -=c;
//	}
//	sd3:="sd";
//	a+=b;
//}
//{
//	b : int = 15;
//	sd:="sd";
//	b+=2;
//	{
//		c : float = -1;
//		b*= c;
//		a -=c;
//	}
//	a+=b;
//	sd5:="sd";
//}
//Print a;

//fun lol( a : int) : int
//{
//	Print "Lol";
//	Print a;
//	return 2;
//}
//lol(2+2);
//
//fun main() : int 
//{
//	Print "main";
//	//a:= lol(2*3 - 1);
//	lol(2*3 - 1);
//	//Print a;
//	return 0;
//}

//fun mult (a : int, b: int) : int
//{
//	return a*b;
//}
//fun foo( a: int, b : int ) : int 
//{ 
//	return mult(a,b) + mult(a,b);
//}
//a := 0;
//fun main() : int
//{
//	a = foo(2,2);
//	Print a;
//	return 0;
//}